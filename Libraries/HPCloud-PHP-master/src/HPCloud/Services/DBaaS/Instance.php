<?php
/* ============================================================================
(c) Copyright 2012 Hewlett-Packard Development Company, L.P.
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights to
use, copy, modify, merge,publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
============================================================================ */
/**
 * @file
 *
 * This file contains the DBaaS Instance class.
 */

namespace HPCloud\Services\DBaaS;

use \HPCloud\Transport;

class Instance extends Operations {

  protected $token;
  protected $projectId;
  protected $url;
  protected $client;

  public function __construct($token, $projectId, $endpoint) {
    $this->token = $token;
    $this->projectId = $projectId;
    $this->url = $endpoint;
    $this->client = Transport::instance();
  }

  public function describe($instanceId) {
    $url = sprintf('%s/instances/%s', $this->url, $instanceId);
    $res = $this->client->doRequest($url, 'GET', $this->headers());

    $json = json_decode($res->content(), TRUE);
    return InstanceDetails::newFromJSON($json['instance']);
  }

  public function listInstances() {
    $url = $this->url . '/instances';
    $res = $this->client->doRequest($url, 'GET', $this->headers());
    $json = json_decode($res->content(), TRUE);

    $list = array();
    foreach ($json['instances'] as $instance) {
      $list[] = InstanceDetails::newFromJSON($instance);
    }
    return $list;
  }

  /**
   * Create a new database.
   *
   * This creates a database tuned according to the $flavor settings. The
   * return data will include login/password and connection information.
   *
   * @attention
   *   This is the only time that the login and password info will be returned.
   *
   * @param string $name
   *   The name of the database.
   * @param string $flavor
   *   The string flavor name. Known values are:
   *- medium
   * @param array $typeSpec
   *   A typespec array. Currently, only 'mysql', '5.5' is supported.
   * @retval HPCloud::Services::DBaaS::InstanceDetails
   * @return \HPCloud\Services\DBaaS\InstanceDetails
   *   The details of creation, including login and password info.
   * @see http://api-docs.hpcloud.com/hpcloud-dbaas/1.0/content/instance-create.html
   */
  public function create($name, $flavor = 'medium', $typeSpec = NULL) {

    // Based on the name we need to get the flavor details.
    $f = new Flavor($this->token, $this->projectId, $this->url);
    $flavorObject = $f->getFlavorByName($flavor);

    // Set type spec. As of the initial release of DBaaS, the only support
    // type is mysql 5.5.
    if (empty($typeSpec)) {
      $typeSpec = array(
        'name' => 'mysql',
        'version' => '5.5',
      );
    }
    $json = array(
      'instance' => array(
        'name' => $name,
        'flavorRef' => $flavorObject->url(),
        'dbtype' => $typeSpec,
      ),
    );
    $url = $this->url . '/instances';
    $postData = json_encode($json);
    //fwrite(STDOUT, "POST DATA: $postData\n");
    $length = strlen($postData);
    $headers = $this->headers(array(
      'Accept' => 'application/json',
      'Content-Length' => $length,
      'Content-Type' => 'application/json',
    ));
    $res = $this->client->doRequest($url, 'POST', $headers, $postData);

    $results = json_decode($res->content(), TRUE);

    return InstanceDetails::newFromJSON($results['instance']);
  }

  public function delete($instanceId) {
    $url = sprintf('%s/instances/%s', $this->url, $instanceId);
    $this->client->doRequest($url, 'DELETE', $this->headers());
    return TRUE;
  }

  public function restart($instanceId) {
    $url = sprintf('%s/instances/%s/restart', $this->url, $instanceId);
    $headers = $this->headers(array('Content-Length' => '0'));
    $this->client->doRequest($url, 'POST', $headers);
    return TRUE;
  }

  /**
   * Reset the primary password on this instance.
   *
   * @retval string
   * @return string
   *   The new (autogenerated) password.
   */
  public function resetPassword($instanceId) {
    $url = sprintf('%s/instances/%s/resetpassword', $this->url, $instanceId);
    $headers = $this->headers(array('Content-Length' => '0'));
    $res = $this->client->doRequest($url, 'POST', $headers);
    $json = json_decode($res);

    return $json->password;
  }

  /*
  protected function headers($add = array()) {
    return $add + array(
      'X-Auth-Token' => $this->token,
      'X-Auth-Project-Id' => $this->projectId,
    );
  }
   */
}
